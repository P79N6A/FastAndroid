apply plugin: 'com.android.library'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')




    compile thirddependencies.glide
    compile thirddependencies.multidex

    compile thirddependencies.junit
    compile 'io.taig.android:parcelable_2.11:3.0.0-BETA1'
    compile thirddependencies.support_customtabs

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'



    compile 'com.android.volley:volley:1.0.0'


    compile 'com.antfortune.freeline:runtime:0.8.7'

    compile(thirddependencies.retrofit) {
        exclude group: "com.squareup.okhttp3"
    }

    compile thirddependencies.rxandroid
    compile thirddependencies.rxjava
    compile thirddependencies.retrofit_adapter_rxjava
    compile thirddependencies.retrofit_converter_gson
    compile thirddependencies.okhttp3_log_interceptor

    compile thirddependencies.eventbus

    compile project(':library')
    //compile thirddependencies.fastAndroid





    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    testCompile 'junit:junit:4.12'


    compile 'com.amitshekhar.android:debug-db:1.0.1'
}


def sdk_appendix = "baselib"
def sdk_baseName = "component"
def sdk_version = "0.0.2"

task buildJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {

    appendix = sdk_appendix
    baseName = sdk_baseName
    version = sdk_version
    //classifier = "release"
    //后缀名
    extension = "jar"
    //最终的Jar 包名 ， 如果没设置 ， 默认为[baseName] - [appendix] - [version] - [classifier].[extension]

    // 需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //排除这两个文件
    include("com/mrzhang/**/*.class")
    exclude("com/mrzhang/component/componentlib/BuildConfig.class",
            "com/mrzhang/component/componentlib/R.class",
            "com/mrzhang/component/componentlib/R\$*.class")
}

task buildJarAndCopy(dependsOn: "buildJar", type: Copy) {
    from(project.buildDir.absolutePath + "/libs")
    include(sdk_baseName + "-" + sdk_appendix + "-" + sdk_version + ".jar")
    into("release")
}