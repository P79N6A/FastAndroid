def initModuleCompile(def path) {
    Properties properties = new Properties();
    File file = new File(path)
    properties.load(file.newDataInputStream())
    Iterator itr = properties.entrySet().iterator();
    while (itr.hasNext()) {
        Map.Entry e = (Map.Entry) itr.next();
        String key = e.getKey();
        ext.setProperty(key, e.getValue());
        println("key = ${key}, value = ${e.getValue()}")
    }
}

initModuleCompile(rootDir.getAbsolutePath() + "/module.properties")

ext {
    compile_library = this.&compile_library
    compile_baselib = this.&compile_baselib
    compile_topic = this.&compile_topic
}





def compile_library(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isLibraryDebug.toBoolean()) {
            compile project(':library')
            println("compile library  with  source code \n")
        } else {
            compile(name: 'library-release', ext: 'aar')
            println("compile usercenter with aar \n")
        }
    }
}


def compile_baselib(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isBaselibDebug.toBoolean()) {
            compile project(':baselib')
            println("compile baselib  with  source code \n")
        } else {
            compile(name: 'baselib-release', ext: 'aar')
            println("compile baselib with aar \n")
        }
    }
}
def compile_topic(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isTopicDebug.toBoolean()) {
            compile project(':topic')
            println("compile topic with  source code \n")
        } else {
            compile(name: 'topic-release', ext: 'aar')
            println("compile topic with aar \n")
        }
    }
}

