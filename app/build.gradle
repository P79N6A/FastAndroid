apply plugin: 'com.android.application'
apply from: rootProject.file('module.gradle')
println('app gradle----->')


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}

def getAppVersionName() {
    return rootProject.ext.versionName
}

//commit次数作为版本号,因为commit只增不减
def getCommitVersionCode() {
    if (project.hasProperty("RELEASE")) {
        def cmd = "git rev-list HEAD --count"
        return cmd.execute().text.trim().toInteger()
    } else {
        return 13149
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('MMddHHmm')
    return formattedDate
}


android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode getCommitVersionCode()
        versionName getAppVersionName()

        //archivesBaseName = "FastAndroid-$versionName"
        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //getJackOptions().setEnabled(true)

    }


    splits {
        density {
            enable true
            //清除默认的屏幕密度列表
            reset()
            //指定生成xhdpi的apk 减少包大小
            include 'xhdpi'
        }
    }

    lintOptions {
        abortOnError false
    }



    signingConfigs {
        dev {
            storeFile file('debug.jks')
            storePassword '654321'
            keyAlias 'jerry321'
            keyPassword 'jerrry123'

        }
        gp { // 外发包 签名
            storeFile file('release.jks')
            storePassword '123456'
            keyAlias 'jerry123'
            keyPassword 'jerry321'
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled false
            buildConfigField("boolean","LOG_DEBUG","false")
            buildConfigField("String","BUGLY_APP_ID","\"a397701fd5\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        debug {
            minifyEnabled false
            buildConfigField("boolean","LOG_DEBUG","true")
            buildConfigField("String","BUGLY_APP_ID","\"272afe1108\"")


        }

    }

    /*渠道信息配置*/
    productFlavors {
        dev {
            //不同渠道，不同包名
            applicationId "com.fast.adnroid"
            signingConfig signingConfigs.dev
            versionCode 434 //该渠道属于测试渠道，不走commit逻辑，避免fabric被污染
            manifestPlaceholders = [ISTEST_VALUE: "TEST", CHANNEL_VALUE: name,PACKAGE_NAME: applicationId]

            //使用multiDex 如果minsdkersion小雨20 会增加构建时间
            minSdkVersion 21


        }
        //这里的isGpFlavorCreate和isAllFlavorCreate必须定义在gradle.properties文件，放在自定义文件无效
       /* if (isbaiduFlavorCreate.toBoolean() || isAllFlavorCreate.toBoolean()){
            baidu {
                applicationId "com.fast.adnroid"
                signingConfig signingConfigs.gp
                manifestPlaceholders = [ISTEST_VALUE: "PRD", CHANNEL_VALUE: name, PACKAGE_NAME: applicationId]
            }
        }*/

        //这里的isGpFlavorCreate和isAllFlavorCreate必须定义在gradle.properties文件，放在自定义文件无效
        /*if (isWandoujiaFlavorCreate.toBoolean() || isAllFlavorCreate.toBoolean()){
            wandoujia {
                applicationId "com.fast.adnroid"
                signingConfig signingConfigs.gp
                manifestPlaceholders = [ISTEST_VALUE: "PRD", CHANNEL_VALUE: name, PACKAGE_NAME: applicationId]
            }
        }*/
    }
    /**
     * release构建忽略dev这一个渠道
     */
    variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.getFlavors().each() { flavor ->
                if (flavor.name.equals('dev')){
                    variant.setIgnore(true);
                }


            }
        }
    }

    //修改apk输出名字格式
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            //if (variant.buildType.name.equals("release")){
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def appName = "FastAndroid"
                    def flavorsName = variant.productFlavors[0].name
                    def code = getCommitVersionCode()
                    //测试版本code固定用434 防止bug统计平台被污染
                    if (flavorsName.equals("dev")) {
                        code = 434
                    }else {
                    }
                    def pubversionName = defaultConfig.versionName + "." + code
                    def buildTypeName = buildType.name


                    def fileName = "Module_${appName}_${pubversionName}_${flavorsName}_${buildTypeName}.apk"

                    output.outputFile = new File(outputFile.parent, fileName)
                }
            //}
        }
    }

    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dexOptions {
//        incremental = true;
        preDexLibraries = true
//        javaMaxHeapSize "4g" // 2g should be also OK
//        maxProcessCount 8
    }

}






task getReleasePassword <<{
    try {
        Properties properties = new Properties();
        File file = new File(rootDir.getAbsolutePath() + "/private.properties")
        def stream = file.newDataInputStream();
        properties.load(stream)
        Iterator itr = properties.entrySet().iterator();
        while (itr.hasNext()) {
            Map.Entry e = (Map.Entry) itr.next();
            String key = e.getKey();
            rootProject.ext.setProperty(key, e.getValue());
            println("private.properties key = ${key}, value = ${e.getValue()}")
        }
    } catch (Exception e) {
        println '\n' + e.printStackTrace()
    } finally {
        stream.close()
    }
}




dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile thirddependencies.glide
    compile thirddependencies.appcompatV7
    compile thirddependencies.multidex
    /*compile dep.bugly*/

    //compile_library(getProject())
    compile project(':library')

    compile thirddependencies.junit
    compile 'io.taig.android:parcelable_2.11:3.0.0-BETA1'

    compile thirddependencies.cardview

    compile thirddependencies.design


    compile thirddependencies.rxandroid
    compile thirddependencies.rxjava

    compile ("com.squareup.retrofit2:retrofit:2.1.0"){
        //exclude group: "com.squareup.okhttp3"
    }
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    //compile 'com.squareup.okhttp3:logging-interceptor:2.1.0'


}
